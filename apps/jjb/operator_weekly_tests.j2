---
- job:
    name: maintenance-trigger-weekly-operator-tests
    project-type: pipeline
    display-name: 'Trigger weekly tests'
    sandbox: true
    triggers:
      - timed: "H 0 * * 0"
    dsl: 
      !include-raw-verbatim:
        - trigger-weekly-tests.groovy
{% for testsuite in testsuites %}
- job:
    name: {{ testsuite.id }}-it-weekly
    project-type: freestyle
    defaults: global
    description: ''
    disabled: false
    display-name: '{{ testsuite.display_name }} weekly test' 
    concurrent: true
    quiet-period: 5
    logrotate:
      daysToKeep: -1
      numToKeep: 20
      artifactDaysToKeep: -1
      artifactNumToKeep: -1
    scm:
      - git:
          url: https://github.com/stackabletech/{{ testsuite.git_repo }}.git
          branches:
            - origin/main
          browser: githubweb
          browser-url: https://github.com/stackabletech/{{ testsuite.git_repo }}.git
          timeout: 20
    wrappers:
      - credentials-binding:
        - text:
            credential-id: REPLICATED_API_TOKEN
            variable: REPLICATED_API_TOKEN
        - username-password-separated:
            credential-id: IONOS_API
            username: IONOS_USERNAME
            password: IONOS_PASSWORD
        - username-password-separated:
            credential-id: CLUSTER_LOGGING
            username: CLUSTER_LOGGING_USERNAME
            password: CLUSTER_LOGGING_PASSWORD
      - build-user-vars
    builders:
      - shell: 
          unstable-return: 255
          command: |
            # ---------------------------------------------------------------------------------------------
            # This Jenkins job has been generated by the Stackable Jenkins JobBuilder
            # ---------------------------------------------------------------------------------------------

            # We're using Docker from within a Docker container, so we have to make sure to provide
            # the Docker daemon with the proper absolute path for volume mounts.
            # HOST_WORKSPACE is the absolute path of this job's workspace folder as used on the actual Docker host.
            export HOST_WORKSPACE=`echo $WORKSPACE | sed 's~jenkins_home~jenkins/data~'`

            # The Docker image we're using is running under root (and must do so), so
            # we're providing it with a User/Group ID so that it can write the output files using this User/Group.
            # Otherwise we might end up with root-owned files which cannot be cleaned up by Jenkins
            export OUTPUT_FILE_USER="$(id -u):$(id -g)"

            echo "build_description::#{{ platforms[testsuite.weekly_test.platform].name }} ({{ platforms[testsuite.weekly_test.platform].versions[0] }})#"

            # Run test
            mkdir -p target/
            docker run --rm \
              --volume "$HOST_WORKSPACE/target/:/target/" \
              --env OUTPUT_FILE_USER=$OUTPUT_FILE_USER \
              --env REPLICATED_API_TOKEN=$REPLICATED_API_TOKEN \
              --env IONOS_USERNAME=$IONOS_USERNAME \
              --env IONOS_PASSWORD=$IONOS_PASSWORD \
              --env PLATFORM={{ testsuite.weekly_test.platform }} \
              --env PLATFORM_VERSION="{{ platforms[testsuite.weekly_test.platform].versions[0] }}" \
              --env OPERATOR={{ testsuite.id }} \
              --env OPERATOR_VERSION="0.0.0-dev" \
              --env CLUSTER_LOGGING_ENDPOINT='{{ cluster_logging_endpoint }}' \
              --env CLUSTER_LOGGING_USERNAME="$CLUSTER_LOGGING_USERNAME" \
              --env CLUSTER_LOGGING_PASSWORD="$CLUSTER_LOGGING_PASSWORD" \
              --env OPENSEARCH_DASHBOARDS_URL='{{ opensearch_dashboards_url }}' \
              --env TEST_SCRIPT_PARAMS="{{ testsuite.weekly_test.test_script_params }}" \
              --env VECTOR_AGGREGATOR='vector-aggregator.default.svc.cluster.local:6000' \
              docker.stackable.tech/operator-test-runner:latest
    publishers:
      - archive:
          artifacts: 'target/*'
          allow-empty: true
      - slack:
          room: '{{ slack_channel }}'
          notify-unstable: True
          notify-every-failure: True
          notify-back-to-normal: True
      - description-setter:
          regexp: ".*build_description::#(.*)#.*"
          regexp-for-failed: ".*build_description::#(.*)#.*"
          set-for-matrix: false
{% endfor %}

