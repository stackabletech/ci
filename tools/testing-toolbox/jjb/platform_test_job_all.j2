---
- job:
    name: T2-all-platform-test
    project-type: matrix
    defaults: global
    description: ''
    disabled: false
    display-name: 'T2 test all platforms'
    concurrent: true
    quiet-period: 5
    logrotate:
      daysToKeep: -1
      numToKeep: 20
      artifactDaysToKeep: -1
      artifactNumToKeep: -1
    axes:
      - axis:
          name: PLATFORM_ID
          type: user-defined
          values:{% for platform in platforms %}
            - {{ platform['name'] }}{% endfor %}
    parameters:
      - choice:
          name: T2_INSTANCE
          choices:
            - T2_PROD
            - T2_DEV
          description: Which T2 instance should create the test cluster?
      - string:
          name: T2_TESTDRIVER_TAG
          default: latest
          description: Tag of the T2 Testdriver to be used
    wrappers:
      - credentials-binding:
          - text:
              credential-id: T2_TOKEN
              variable: T2_PROD_TOKEN
          - text:
              credential-id: T2_TOKEN_DEV
              variable: T2_DEV_TOKEN
      - build-user-vars
    builders:
      - shell: 
          unstable-return: 255
          command: |
            # ---------------------------------------------------------------------------------------------
            # This Jenkins job has been generated by the Stackable CI Testing Toolbox
            # ---------------------------------------------------------------------------------------------

            # We're using Docker from within a Docker container, so we have to make sure to provide
            # the Docker daemon with the proper absolute path for volume mounts.
            # HOST_WORKSPACE is the absolute path of this job's workspace folder as used on the actual Docker host.
            export HOST_WORKSPACE=`echo $WORKSPACE | sed 's~jenkins_home~jenkins/data~'`

            # The T2 testdriver Docker image we're using is running under root (and must do so), so
            # we're providing it with a User/Group ID so that it can write the output files using this User/Group.
            # Otherwise we might end up with root-owned files which cannot be cleaned up by Jenkins
            export DOCKER_UID_GID="$(id -u):$(id -g)"

            # Pull the testdriver Docker image
            docker pull docker.stackable.tech/t2-testdriver:$T2_TESTDRIVER_TAG
            
            echo "$PLATFORM_ID"
            echo "$T2_INSTANCE"

            # Create testsuite files
            mkdir -p testsuite/
            docker run --rm \
              --volume "$HOST_WORKSPACE/testsuite/:/target/" \
              --env PLATFORM=$PLATFORM_ID \
              --env METADATA_ANNOTATION_t2.stackable.tech/jenkins-user="${BUILD_USER}" \
              --env METADATA_ANNOTATION_t2.stackable.tech/jenkins-user-id=${BUILD_USER_ID} \
              --env METADATA_ANNOTATION_t2.stackable.tech/jenkins-user-email=${BUILD_USER_EMAIL} \
              docker.stackable.tech/testing-toolbox:latest create-platform-testsuite

            if [ "$T2_INSTANCE" = "T2_PROD" ]; then
              export T2_TOKEN=$T2_PROD_TOKEN
              export T2_URL="https://api.t2.stackable.tech"
              export OPENSEARCH_DASHBOARDS_URL="https://logs.t2.stackable.tech"
            elif [ "$T2_INSTANCE" = "T2_DEV" ]; then
              export T2_TOKEN=$T2_DEV_TOKEN
              export T2_URL="https://api.t2-dev.stackable.tech"
              export OPENSEARCH_DASHBOARDS_URL="https://logs.t2-dev.stackable.tech"
            else
              echo "unknown T2 instance"
              exit 1
            fi

            # Run testdriver
            mkdir -p testsuite/target/
            docker run --rm \
                --volume "$HOST_WORKSPACE/testsuite/target/:/target/" \
                --volume "$HOST_WORKSPACE/testsuite/cluster.yaml:/cluster.yaml" \
                --volume "$HOST_WORKSPACE/testsuite/test.sh:/test.sh" \
                --env CLUSTER=MANAGED \
                --env T2_TOKEN=$T2_TOKEN \
                --env T2_URL=$T2_URL \
                --env OPENSEARCH_DASHBOARDS_URL=$OPENSEARCH_DASHBOARDS_URL \
                --env UID_GID=$DOCKER_UID_GID \
                docker.stackable.tech/t2-testdriver:$T2_TESTDRIVER_TAG
    publishers:
      - archive:
          artifacts: 'testsuite/target/*'
          allow-empty: true
      - slack: 
          room: '#notifications-jenkins'
          notify-unstable: True
          notify-every-failure: True
          notify-back-to-normal: True
          include-custom-message: True
          custom-message: |
            (<$BUILD_URL|Open in classic Jenkins UI>)

