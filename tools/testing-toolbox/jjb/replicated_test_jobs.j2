---
{% for testsuite in testsuites %}
- job:
    name: {{ testsuite }}-it-replicated
    project-type: freestyle
    defaults: global
    description: ''
    disabled: false
    display-name: '{{ testsuites[testsuite].title }} custom integration test on replicated.com' 
    concurrent: true
    quiet-period: 5
    logrotate:
      daysToKeep: -1
      numToKeep: 20
      artifactDaysToKeep: -1
      artifactNumToKeep: -1
    scm:
      - git:
          url: https://github.com/stackabletech/{{ testsuite }}.git
          branches:
            - ${GIT_BRANCH_OR_TAG}
          browser: githubweb
          browser-url: https://github.com/stackabletech/{{ testsuite }}.git
          timeout: 20
    parameters:
      - choice:
          name: TEST_PLATFORM
          choices:{% for platform in platforms %}{% for version in platforms[platform].versions %}
            - {{ platforms[platform].title }}, {{ version }} <{{ platform }}|{{ version }}>{% endfor %}{% endfor %}
          description: On which platform should the test run?
      - git-parameter:
          name: GIT_BRANCH_OR_TAG
          description: The Git branch or tag where your Operator integration tests are, defaults to 'main'.
          type: PT_BRANCH_TAG
          selectedValue: NONE
          sortMode: ASCENDING_SMART
          defaultValue: origin/main
      - string:
          name: BEKU_SUITE
          description: Testsuite which is used (beku feature)
          trim: true
          default: hurz
    wrappers:
      - credentials-binding:
          - text:
              credential-id: REPLICATED_API_TOKEN
              variable: REPLICATED_API_TOKEN
      - build-user-vars
    builders:
      - shell: 
          unstable-return: 255
          command: |
            # ---------------------------------------------------------------------------------------------
            # This Jenkins job has been generated by the Stackable CI Testing Toolbox
            # ---------------------------------------------------------------------------------------------

            # We're using Docker from within a Docker container, so we have to make sure to provide
            # the Docker daemon with the proper absolute path for volume mounts.
            # HOST_WORKSPACE is the absolute path of this job's workspace folder as used on the actual Docker host.
            export HOST_WORKSPACE=`echo $WORKSPACE | sed 's~jenkins_home~jenkins/data~'`

            # The T2 testdriver Docker image we're using is running under root (and must do so), so
            # we're providing it with a User/Group ID so that it can write the output files using this User/Group.
            # Otherwise we might end up with root-owned files which cannot be cleaned up by Jenkins
            export DOCKER_UID_GID="$(id -u):$(id -g)"

            # Pull the testdriver Docker image
            docker pull docker.stackable.tech/replicated-testrunner:latest

            # Read the keys of the selection parameters
            export PLATFORM=`echo $TEST_PLATFORM | cut -d '<' -f 2 | cut -d '|' -f 1`
            export PLATFORM_VERSION=`echo $TEST_PLATFORM | cut -d '<' -f 2 | cut -d '|' -f 2 | cut -d '>' -f 1`
            export GIT_BRANCH=`echo $GIT_BRANCH_OR_TAG | sed s#origin/##g`

            # Run testdriver
            mkdir -p target/
            docker run --rm \
                --volume "$HOST_WORKSPACE/target/:/target/" \
                --env UID_GID=1000:1000 \
                --env REPLICATED_API_TOKEN=$REPLICATED_API_TOKEN \
                --env TESTSUITE="{{ testsuite }}" \
                --env PLATFORM=$PLATFORM \
                --env PLATFORM_VERSION=$PLATFORM_VERSION \
                --env GIT_BRANCH=$GIT_BRANCH \
                docker.stackable.tech/replicated-testrunner

    publishers:
      - archive:
          artifacts: 'target/*'
          allow-empty: true
{% endfor %}

