---
- job:
    name: t2-platform-test
    project-type: freestyle
    defaults: global
    description: ''
    disabled: false
    display-name: 'T2 custom platform test'
    concurrent: false
    quiet-period: 5
    logrotate:
      daysToKeep: -1
      numToKeep: 20
      artifactDaysToKeep: -1
      artifactNumToKeep: -1
    wrappers:
      - credentials-binding:
          - text:
              credential-id: T2_TOKEN
              variable: T2_TOKEN

    builders:
      - shell: 
          unstable-return: 255
          command: |
            # ---------------------------------------------------------------------------------------------
            # This Jenkins job has been generated by the Stackable CI Testing Toolbox
            # ---------------------------------------------------------------------------------------------

            # We're using Docker from within a Docker container, so we have to make sure to provide
            # the Docker daemon with the proper absolute path for volume mounts.
            # HOST_WORKSPACE is the absolute path of this job's workspace folder as used on the actual Docker host.
            export HOST_WORKSPACE=`echo $WORKSPACE | sed 's~jenkins_home~jenkins/data~'`

            # The T2 testdriver Docker image we're using is running under root (and must do so), so
            # we're providing it with a User/Group ID so that it can write the output files using this User/Group.
            # Otherwise we might end up with root-owned files which cannot be cleaned up by Jenkins
            export DOCKER_UID_GID="$(id -u):$(id -g)"

            # Pull the testdriver Docker image
            docker pull docker.stackable.tech/t2-testdriver:latest
            
            echo "tbd"

            # Create testsuite files
            mkdir -p testsuite/

            # Run testdriver
            mkdir -p testsuite/target/

            echo "test completed!!!" > testsuite/target/test.log

    publishers:
      - archive:
          artifacts: 'testsuite/target/*'
          allow-empty: true
      - slack: 
          room: '#notifications-jenkins'
          notify-unstable: True
          notify-every-failure: True
          notify-back-to-normal: True
          include-custom-message: True
          custom-message: |
            (<$BUILD_URL|Open in classic Jenkins UI>)

