---
{% for testsuite in testsuites %}
- job:
    name: {{ testsuite.name }}-it-custom
    project-type: freestyle
    defaults: global
    description: ''
    disabled: false
    display-name: '{{ testsuite.display_name }} custom test'
    concurrent: true
    quiet-period: 5
    logrotate:
      daysToKeep: -1
      numToKeep: 20
      artifactDaysToKeep: -1
      artifactNumToKeep: -1
    scm:
      - git:
          url: https://github.com/stackabletech/{{ testsuite.git_repo }}.git
          branches:
            - ${GIT_BRANCH_OR_TAG}
          browser: githubweb
          browser-url: https://github.com/stackabletech/{{ testsuite.git_repo }}.git
          timeout: 20
    parameters:
      - git-parameter:
          name: GIT_BRANCH_OR_TAG
          description: The Git branch or tag where your Operator integration tests are, defaults to 'main'.
          type: PT_BRANCH_TAG
          selectedValue: NONE
          sortMode: ASCENDING_SMART
          defaultValue: origin/main
      - choice:
          name: TEST_PLATFORM
          choices:{% for platform in platforms[testsuite.name] %}
            - {{ platform.display_name }}, {{ platform.version }} <{{ platform.id }}|{{ platform.version }}>{% endfor %}
          description: On which platform should the test run?
      - extended-choice:
          name: OPERATOR_VERSION
          description: Version of the operator (binary) this test should use
          property-file: /var/jenkins_home/workspace/Available Versions/versions.properties
          property-key: {{ testsuite.name }}
          quote-value: false
          visible-items: 10
    wrappers:
      - credentials-binding:
          - text:
              credential-id: T2_TOKEN
              variable: T2_TOKEN
    builders:
      - shell: 
          unstable-return: 255
          command: |
            # ---------------------------------------------------------------------------------------------
            # This Jenkins job has been generated by the Stackable CI Testing Toolbox
            # ---------------------------------------------------------------------------------------------

            # Read the keys of the selection parameters
            export PLATFORM_ID=`echo $TEST_PLATFORM | cut -d '<' -f 2 | cut -d '|' -f 1`
            export K8S_VERSION=`echo $TEST_PLATFORM | cut -d '<' -f 2 | cut -d '|' -f 2 | cut -d '>' -f 1`
            export GIT_BRANCH=`echo $GIT_BRANCH_OR_TAG | sed s#origin/##g`

            # We're using Docker from within a Docker container, so we have to make sure to provide
            # the Docker daemon with the proper absolute path for volume mounts.
            # HOST_WORKSPACE is the absolute path of this job's workspace folder as used on the actual Docker host.
            export HOST_WORKSPACE=`echo $WORKSPACE | sed 's~jenkins_home~jenkins/data~'`

            # The T2 testdriver Docker image we're using is running under root (and must do so), so
            # we're providing it with a User/Group ID so that it can write the output files using this User/Group.
            # Otherwise we might end up with root-owned files which cannot be cleaned up by Jenkins
            export DOCKER_UID_GID="$(id -u):$(id -g)"

            # Pull the testdriver Docker image
            docker pull docker.stackable.tech/t2-testdriver:latest
            
            # Create testsuite files
            mkdir -p testsuite/
            docker run --rm \
              --volume "$HOST_WORKSPACE/testsuite/:/target/" \
              --env TESTSUITE={{ testsuite.name }} \
              --env PLATFORM=$PLATFORM_ID \
              --env K8S_VERSION=$K8S_VERSION \
              --env GIT_BRANCH=$GIT_BRANCH \
              --env OPERATOR_VERSION=$OPERATOR_VERSION \
              docker.stackable.tech/testing-toolbox:latest create-testsuite

            # Determine platform and version from generated cluster definition file
            export BUILD_RUN_T2_TEMPLATE = `cat testsuite/cluster.yaml | yq -e '.template'`
            export BUILD_RUN_K8S_VERSION = `cat testsuite/cluster.yaml | yq -e '.spec.k8sVersion'`
            echo "build_run_label::#${BUILD_RUN_T2_TEMPLATE} ${BUILD_RUN_K8S_VERSION}#"

#            # Run testdriver
#            mkdir -p testsuite/target/
#            docker run --rm \
#                --volume "$HOST_WORKSPACE/testsuite/target/:/target/" \
#                --volume "$HOST_WORKSPACE/testsuite/cluster.yaml:/cluster.yaml" \
#                --volume "$HOST_WORKSPACE/testsuite/test.sh:/test.sh" \
#                --env CLUSTER=MANAGED \
#                --env T2_TOKEN=$T2_TOKEN \
#                --env T2_URL=https://t2.stackable.tech \
#                --env UID_GID=$DOCKER_UID_GID \
#                docker.stackable.tech/t2-testdriver    
    publishers:
      - archive:
          artifacts: 'testsuite/target/*'
          allow-empty: true
      - slack: 
          room: '{{ testsuite.custom_test.slack_channels }}'
          notify-success: True
          notify-unstable: True
          notify-every-failure: True
          notify-back-to-normal: True
          include-custom-message: True
          custom-message: |
            *platform:* $TEST_PLATFORM
            *branch or tag:* `$GIT_BRANCH_OR_TAG`
            *operator version:* `$OPERATOR_VERSION`
            (<$BUILD_URL|Open in classic Jenkins UI>)
      - description-setter:
          regexp: ".*(<a href=.*a>)"
          regexp-for-failed: ".*(<a href=.*a>)"
          description: "some description"
          description-for-failed: "another description"
          set-for-matrix: true
{% endfor %}

